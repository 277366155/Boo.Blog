// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TangPoem.EF;
using Volo.Abp.EntityFrameworkCore;

namespace TangPoem.EF.Migrations
{
    [DbContext(typeof(PoemDbContext))]
    [Migration("20211015094919_AddDataTable")]
    partial class AddDataTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.MySql)
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("TangPoem.Core.Poems.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TangPoem.Core.Poems.CategoryPoem", b =>
                {
                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("PoemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("CategoryId", "PoemId");

                    b.HasIndex("PoemId");

                    b.ToTable("CategoriesPoem");
                });

            modelBuilder.Entity("TangPoem.Core.Poems.Poem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("Num")
                        .HasColumnType("longtext");

                    b.Property<long>("PoetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PoetId");

                    b.ToTable("Poems");
                });

            modelBuilder.Entity("TangPoem.Core.Poems.Poet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Poets");
                });

            modelBuilder.Entity("TangPoem.Core.Poems.CategoryPoem", b =>
                {
                    b.HasOne("TangPoem.Core.Poems.Category", "Category")
                        .WithMany("CategoryPoems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TangPoem.Core.Poems.Poem", "Poem")
                        .WithMany("PoemCategories")
                        .HasForeignKey("PoemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Poem");
                });

            modelBuilder.Entity("TangPoem.Core.Poems.Poem", b =>
                {
                    b.HasOne("TangPoem.Core.Poems.Poet", "Author")
                        .WithMany("Poems")
                        .HasForeignKey("PoetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TangPoem.Core.Poems.Category", b =>
                {
                    b.Navigation("CategoryPoems");
                });

            modelBuilder.Entity("TangPoem.Core.Poems.Poem", b =>
                {
                    b.Navigation("PoemCategories");
                });

            modelBuilder.Entity("TangPoem.Core.Poems.Poet", b =>
                {
                    b.Navigation("Poems");
                });
#pragma warning restore 612, 618
        }
    }
}
